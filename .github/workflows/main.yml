name: RDP
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with dynamic password
        shell: pwsh
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          # Generate a random strong password (16 chars: letters+digits+symbols)
          $chars = ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,.<>?')
          $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
          $bytes = New-Object 'System.Byte[]' 16
          $passwordChars = for ($i = 0; $i -lt 16; $i++) {
              $rng.GetBytes($bytes, $i, 1)
              $chars[ [int]($bytes[$i] % $chars.Length) ]
          }
          $password = -join $passwordChars

          # Mask password in logs
          Write-Host "::add-mask::$password"

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name "TOOLBOXLAP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "TOOLBOXLAP" -Password $securePass -AccountNeverExpires
          } else {
              # If user exists, update password
              $user = Get-LocalUser -Name "TOOLBOXLAP"
              $user | Set-LocalUser -Password $securePass
          }

          # Add to groups (change as needed)
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "TOOLBOXLAP"
          Add-LocalGroupMember -Group "Administrators" -Member "TOOLBOXLAP"

          # Export credentials to env for later steps and to a file artifact
          echo "RDP_USER=TOOLBOXLAP" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

          $credsFile = Join-Path $env:GITHUB_WORKSPACE "rdp-credentials.txt"
          "Address: (Tailscale IP will follow after connect)" | Out-File -FilePath $credsFile -Encoding utf8
          "Username: TOOLBOXLAP" | Out-File -FilePath $credsFile -Append -Encoding utf8
          "Password: $password" | Out-File -FilePath $credsFile -Append -Encoding utf8

          if (-not (Get-LocalUser -Name "TOOLBOXLAP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

          # update credential file with actual address
          $credsFile = Join-Path $env:GITHUB_WORKSPACE "rdp-credentials.txt"
          (Get-Content $credsFile) -replace "Address: \(Tailscale IP will follow after connect\)", "Address: $tsIP" | Set-Content $credsFile -Encoding utf8

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Upload credentials artifact
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: rdp-credentials.txt

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: TOOLBOXLAP"
          # password masked in logs by add-mask
          Write-Host "Password: (masked)"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
